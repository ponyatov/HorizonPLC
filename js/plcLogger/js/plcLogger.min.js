class GrayLogTransport{constructor(options){this.server=options.server||"192.168.50.251",this.port=options.port||5142,this.source=options.hostname||Process._BoardName,this.facility=options.facility||"HorizonPLC",this.bufferSize=options.bufferSize||1350,this.msg={version:"1.1",host:this.source,facility:this.facility,service_bus:"appBus"},this.socket=require("dgram").createSocket("udp4")}Log(_packet){Object.assign(this.msg,_packet);const toSend=JSON.stringify(this.msg);try{this.socket.send(toSend,0,toSend.length,this.port,this.server,(err,bytes)=>{if(err||bytes>this.bufferSize)throw err})}catch(e){console.log(`[${Process.GetSystemTime()}] ${srvc} | ERROR | ${e}. Recreating. . .`),this.socket=require("dgram").createSocket("udp4")}}}class ClassLogger{constructor(options){if(this.Instance)return this.Instance;ClassLogger.prototype.Instance=this,this.name="ClassLogger",this._Glog=new GrayLogTransport(options||{})}get LogLevel(){return{CRITICAL:2,ERROR:3,WARN:4,NOTICE:5,INFO:6,DEBUG:7}}Capitalize(_str){const str=_str.toUpperCase();return str.charAt(0).toUpperCase()+str.slice(1)}Log(_msg){let flevel=-1,fdesc="Unknown";const logdesc=["CRITICAL","ERROR","WARNING","NOTICE","INFO","DEBUG"],level=logdesc.indexOf(logdesc.find(lvl=>lvl.startsWith(_msg.level.toUpperCase())));-1!=level&&(fdesc=logdesc[level],flevel=level+2),Process._HaveNet&&this._Glog.Log({message:_msg.msg,level:flevel,level_desc:fdesc,service:_msg.service,full_message:_msg.obj||{}}),console.log(`[${Process.GetSystemTime()}] ${_msg.service} | ${fdesc} | ${_msg.msg}`)}}exports=ClassLogger;