const sendData=(pin,rgb)=>require("neopixel").write(pin,rgb),generateColor=n=>Array(3*n).fill().map(()=>Math.round(255*Math.random())),hexToRgb=hex=>{hex=hex.slice(1);let bigint=parseInt(hex,16),r,g,b;return new Uint8ClampedArray([bigint>>16&255,bigint>>8&255,255&bigint])},hexArrToColor=arr=>{let rgbColor=new Uint8ClampedArray(3*arr.length);return arr.forEach((hex,i)=>{let ledColor=hexToRgb(hex);rgbColor[3*i]=ledColor[0],rgbColor[3*i+1]=ledColor[1],rgbColor[3*i+2]=ledColor[2]}),rgbColor},ClassActuator=require("plcActuator.min.js");class ClassLedStrip extends ClassActuator{constructor(opts){ClassActuator.call(this,opts),this._Length=opts.length,this._Values=new Uint8ClampedArray(3*opts.length)}SetValue(_chNum,_val,_opts){let opts=_opts||{};if(0==(_val=E.clip(_val,0,1)))return this.Off(_chNum,_opts);if("random"===opts.color&&(opts.color=generateColor(1)),"randomAll"===opts.color&&(opts.color=generateColor(this._Length),"number"==typeof opts.ledNum))return!1;if("string"==typeof opts.color&&"#"===opts.color[0]){if(7!==opts.color.length)return!1;opts.color=hexToRgb(opts.color)}return Array.isArray(opts.color)&&"string"==typeof opts.color[0]&&(opts.color=hexArrToColor(opts.color)),opts.exclusive&&this.SetLedColor({color:[0,0,0]}),opts.color&&this.SetLedColor(opts),this._ChStatus[_chNum]=1,sendData(this._Pins[0],this._Values.map(c=>c*_val)),!0}Off(_chNum,_opts){let opts;return(_opts||{}).saveState||(this._Values=this._Values.fill(0)),sendData(this._Pins[0],new Uint8ClampedArray(3*this._Length).fill(0)),this._ChStatus[_chNum]=0,!0}SetLedColor(_opts){let color=_opts.color,ledNum=_opts.ledNum,j=0;if("number"!=typeof ledNum)for(let i=0;i<this._Length;i++)this._Values[3*i]=color[j+1],this._Values[3*i+1]=color[j],this._Values[3*i+2]=color[j+2],color.length>3&&(j+=3);else this._Values[3*ledNum]=color[1],this._Values[3*ledNum+1]=color[0],this._Values[3*ledNum+2]=color[2];return this._Values}}exports=ClassLedStrip;