const ClassSensor=require("plcSensor.min.js");class LowLevelClassINA{constructor(_bus,_address){this._I2c=_bus,this._Address=_address||64}ReadWord(_reg){this._I2c.writeTo(this._Address,128|_reg);const data=this._I2c.readFrom(this._Address,2);return data[0]<<8|data[1]}WriteWord(_reg,_data){this._I2c.writeTo(this._Address,[_reg,_data>>8,_data])}WhoIam(_wai){return this.ReadWord(0)!==(_wai||14751)}Reset(){this.WriteWord(0,32768)}Calibrate(_val){this.WriteWord(5,_val)}UnsignedToSigned(_val){return 32768&_val?_val-65536:_val}ReadShuntVoltageRaw(){return this.UnsignedToSigned(this.ReadWord(1))}ReadBusVoltageRaw(){return this.ReadWord(2)>>3}ReadPowerRaw(){return this.ReadWord(3)}ReadCurrentRaw(){return this.UnsignedToSigned(this.ReadWord(4))}ConfigureBVR(_val){let cfg=this.ReadWord(0);cfg&=57343,32==_val&&(cfg|=8192),this.WriteWord(0,cfg)}ConfigureGain(_val){let cfg=this.ReadWord(0);const pga={40:0,80:2048,160:4096,320:6144};cfg&=59391,cfg|=pga[_val],this.WriteWord(0,cfg)}ConfigureBusADC(_val){let cfg=this.ReadWord(0);const adc={9:0,10:128,11:256,12:384,2:1152,4:1280,8:1408,16:1536,32:1664,64:1792,128:1920};cfg&=63615,cfg|=adc[_val],this.WriteWord(0,cfg)}ConfigureShuntADC(_val){let cfg=this.ReadWord(0);const adc={9:0,10:128,11:256,12:384,2:1152,4:1280,8:1408,16:1536,32:1664,64:1792,128:1920};cfg&=65415,cfg|=adc[_val]>>4,this.WriteWord(0,cfg)}ConfigureMode(_val){let cfg=this.ReadWord(0);cfg&=65528,cfg|=_val,this.WriteWord(0,cfg)}}class ClassPowerINA219 extends ClassSensor{constructor(_opts){ClassSensor.call(this,_opts),this._Name="ClassPowerINA219",this._Sensor=new LowLevelClassINA(_opts.bus,_opts.address),this._Config=_opts.config||{},this._MinPeriod=20,this._Interval,this.Init()}Init(){if(this._Sensor.Reset(),this._Sensor.WhoIam(this._Config.WAI))throw new Error("INA219 not found!");this._Config.maxCurrent=this._Config.maxCurrent||3.2768,this._Config.rShunt=this._Config.rShunt||.1,this._Config.busVoltageRange=this._Config.busVoltageRange||32,this._Config.gain=this._Config.gain||320,this._Config.busADC=this._Config.busADC||12,this._Config.shuntADC=this._Config.shuntADC||12,this._Config.mode=this._Config.mode||7,this.Calibrate(0,{amps:this._Config.maxCurrent,ohms:this._Config.rShunt}),this.Configure(0,this._Config)}Calibrate(_num_channel,_clb){"object"==typeof _clb&&(_clb.amps&&"number"==typeof _clb.amps&&(this._Config.maxCurrent=_clb.amps||3.2768,this._Config.currentLSB=3.0517578125*this._Config.maxCurrent/1e5,this._Sensor.Calibrate(Math.round(.04096/(this._Config.currentLSB*this._Config.rShunt)))),_clb.ohms&&"number"==typeof _clb.ohms&&(this._Config.rShunt=_clb.ohms||.1,this._Sensor.Calibrate(Math.round(.04096/(this._Config.currentLSB*this._Config.rShunt)))))}Configure(_num_channel,_cfg){if("object"==typeof _cfg){if(_cfg.bvr){const bvr_values=[16,32];bvr_values.includes(_cfg.bvr)&&(this._Sensor.ConfigureBVR(_cfg.bvr),this._Config.busVoltageRange=_cfg.bvr)}if(_cfg.gain){const gain_values=[40,80,160,320];gain_values.includes(_cfg.gain)&&(this._Sensor.ConfigureGain(_cfg.gain),this._Config.gain=_cfg.gain)}if(_cfg.badc){const adc_values=[9,10,11,12,2,4,8,16,32,64,128];adc_values.includes(_cfg.badc)&&(this._Sensor.ConfigureBusADC(_cfg.badc),this._Config.busADC=_cfg.badc)}if(_cfg.sadc){const adc_values=[9,10,11,12,2,4,8,16,32,64,128];adc_values.includes(_cfg.sadc)&&(this._Sensor.ConfigureShuntADC(_cfg.sadc),this._Config.shuntADC=_cfg.sadc)}if(null!=_cfg.mode){const modes=[0,1,2,3,4,5,6,7];modes.includes(_cfg.mode)&&(this._Sensor.ConfigureMode(_cfg.mode),this._Config.mode=_cfg.mode)}}}Start(_num_channel,_period){if(this._Channels[_num_channel].Status=1,!this._Interval){let period="number"==typeof _period&_period>=this._MinPeriod?_period:this._MinPeriod;this._Interval=setInterval(()=>{this._Channels[0].Status&&(this._Channels[0].Value=1e-5*this._Sensor.ReadShuntVoltageRaw()),this._Channels[1].Status&&(this._Channels[1].Value=.004*this._Sensor.ReadBusVoltageRaw()),this._Channels[2].Status&&(this._Channels[2].Value=this._Sensor.ReadCurrentRaw()*this._Config.currentLSB),this._Channels[3].Status&&(this._Channels[3].Value=this._Sensor.ReadPowerRaw()*this._Config.currentLSB*20)},period)}}ChangeFreq(_num_channel,freq){clearInterval(this._Interval),setTimeout(()=>this.Start(freq),this._MinPeriod)}Stop(_num_channel){this._ChStatus[_num_channel]=0,0==this._ChStatus[0]&&0==this._ChStatus[1]&&0==this._ChStatus[2]&&0==this._ChStatus[3]&&(clearInterval(this._Interval),this._Interval=null)}}exports=ClassPowerINA219;