const ClassSensor=require("plcSensor.min.js");class ClassBistableButton extends ClassSensor{constructor(opts){ClassSensor.call(this,opts),this._SubChannels=this._SubChannels.filter(_ch=>"function"==typeof _ch.SetValue),this._TimeoutDelay=0,this.Configure(0,{timeout:opts.timeout||0,debounce:opts.debounce||15}),this._DefaultState=+Boolean(opts.defaultState),this._Channels[0].on("changeState",this.OnChangeState.bind(this)),this._Pins[0].mode("input")}Start(){return!this._SetWatch&&(this._SubChannels.forEach(_led=>_led.SetValue(+!this._DefaultState)),this._Channels[0].Value=this._DefaultState,this._Channels[0].Status=1,this._SetWatch=setWatch(this.ChangeState.bind(this),this._Pins[0],{repeat:!0,edge:"rising",debounce:this._Debounce}),!0)}OnChangeState(){let stateInverted=+!this._Channels[0].Value;this._SubChannels.forEach(_led=>_led.SetValue(+!stateInverted)),this._Channels[0].Value=stateInverted,this._Channels[0].emit(stateInverted?"disable":"enable"),this._Timeout&&(clearTimeout(this._Timeout),this._Timeout=null),this._TimeoutDelay&&stateInverted&&(this._Timeout=setTimeout(()=>{this._Channels[0].emit("changeState")},1e3*this._TimeoutDelay))}ChangeState(_e){this._Channels[0].emit("changeState")}Stop(){return this._SetWatch&&clearWatch(this._SetWatch),this.Value=1,this._SubChannels.forEach(_led=>_led.SetValue(0)),this._SetWatch=null,this._Channels[0].Status=0,!0}Configure(_opts){return this._TimeoutDelay="number"==typeof _opts.timeout?_opts.timeout:this._TimeoutDelay,this._Debounce=_opts.debounce>0?_opts.debounce:this._Debounce,!0}Reset(){this.Value=this._DefaultState,this._SubChannels.forEach(_led=>_led.SetValue(0))}}exports=ClassBistableButton;