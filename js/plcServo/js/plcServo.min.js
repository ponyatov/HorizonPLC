const ClassActuator=require("ModuleActuator.min.js"),proportion=(x,in_low,in_high,out_low,out_high)=>(x-in_low)*(out_high-out_low)/(in_high-in_low)+out_low,FREQ=50;class ClassServo extends ClassActuator{constructor(_opts){if(ClassActuator.call(this,_opts),"number"!=typeof _opts.range||"number"!=typeof _opts.maxPulse||"number"!=typeof _opts.minPulse)throw new Error("Some args are missing");if(_opts.range<0||_opts.minPulse>=_opts.maxPulse||_opts.startPos&&"number"!=typeof _opts.startPos||_opts.startPos<0||_opts.startPos>_opts.range)throw new Error("Invalid args");this._Range=_opts.range,this._MaxPulse=_opts.maxPulse,this._MinPulse=_opts.minPulse,this._StartPos=_opts.startPos||0,this._Value=void 0,pinMode(this._Pins[0],"output",!0)}SetValue(_chNum,_pos){if("number"!=typeof _pos)throw new Error("Invalid arg");let pos=E.clip(_pos,0,1);if(_pos!==pos)throw new Error("Invalid position value");const msec=proportion(pos,0,1,this._MinPulse,this._MaxPulse),val=proportion(msec,0,20,0,1);this._Channels[0].Status=1,analogWrite(this._Pins[0],val,{freq:50,soft:!0}),this._Value=pos}Reset(){this.SetValue(0,this._StartPos)}GetInfo(){return{currPos:this._Value,currPosAngle:this._Value*this._Range}}}exports=ClassServo;