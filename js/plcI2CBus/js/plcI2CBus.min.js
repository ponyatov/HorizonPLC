class ClassBaseI2CBus{constructor(){if(this.Instance)return this.Instance;ClassBaseI2CBus.prototype.Instance=this,this._I2Cbus={},this._Pattern="I2C",this._IndexBus=10,this.Init()}Init(){let i=1,StrI2c="I2C"+i;for(;!eval("typeof "+StrI2c+" === 'undefined'");)eval(StrI2c+" instanceof I2C")&&(this._I2Cbus[StrI2c]={IDbus:eval(StrI2c),Used:!1}),i++,StrI2c="I2C"+i}AddBus(_opt){if(void 0===_opt.sda||void 0===_opt.scl||void 0===_opt.bitrate)throw new EL_Error("Test",10);if(!(_opt.sda instanceof Pin&&_opt.scl instanceof Pin&&Number.isInteger(_opt.bitrate)))throw new EL_Error("Test",20);let bus_name=this._Pattern+this._IndexBus;return this._I2Cbus[bus_name]={IDbus:new I2C,Used:!0},this._I2Cbus[bus_name].IDbus.setup(_opt),++this._IndexBus,{NameBus:bus_name,IDbus:this._I2Cbus[bus_name].IDbus}}}exports=ClassBaseI2CBus;