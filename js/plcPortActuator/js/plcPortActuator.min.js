const ClassActuator=require("plcActuator.min.js"),OUTPUT_PIN_MODES=["output","analog","opendrain","af_output","af_opendrain","auto"];class ClassPortActuator extends ClassActuator{constructor(opts){if(ClassActuator.call(this,opts),this._TypeOutSignals=opts.typeInSignals,this._QuantityChannel!==this._Pins.length)throw new Error("QuantityChannel must be equal to pins count");if(!Array.isArray(this._TypeOutSignals)||this._TypeOutSignals.length!==this._QuantityChannel)throw new Error("_TypeOutSignals must be an array length of _QuantityChannel");opts.pinModes?this._Pins.forEach((_pin,i)=>{this.Configure(i,{mode:opts.pinModes[i]})}):this._Pins.forEach((_pin,i)=>{_pin.mode("output")})}SetValue(_chNum,_val,_opts){let val=E.clip(_val,0,1);return this.Write(this._Pins[_chNum],val,_opts),this._Channels[_chNum].Status=0==_val?0:1,this}Write(_pin,_val,_opts){"pwm"==this._TypeOutSignals[this._Pins.indexOf(_pin)]?analogWrite(_pin,_val,_opts):digitalWrite(_pin,_val)}Configure(_chNum,_opts){return!!OUTPUT_PIN_MODES.includes(_opts.mode)&&(this._Pins[_chNum].mode(_opts.mode),this)}GetInfo(_chNum){return Object.assign(this._Pins[_chNum].getInfo(),{mode:this._Pins[_chNum].getMode()})}}exports=ClassPortActuator;