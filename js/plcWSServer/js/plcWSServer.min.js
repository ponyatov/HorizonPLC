const MSG_DEBUG_SEND="Sending data...";class ClassWSServer{constructor(options){if(this.Instance)return this.Instance;ClassWSServer.prototype.Instance=this,this._Name="WSocket",this._Server=void 0,this._Proxy=new(require(options.proxyModule))(this),this._Port=options.port||8080,this._BaseModule=options.baseModule,this._Clients=[],this.Init(),this.Run()}Init(){this._Server=require(this._BaseModule).createServer((req,res)=>{res.writeHead(404,{"Content-Type":"text/html"}),res.end("<html><body>404 - Not supported format</body></html>")}),this._Server.on("websocket",ws=>{Object.emit("connect"),H.Logger.Service.Log({service:this._Name,level:"I",msg:`Client connected. Key: ${ws.key.hashed}`}),ws.RegServices=[],ws.on("message",message=>{this._Proxy.Receive(message,ws.key.hashed)}),ws.on("error",error=>{H.Logger.Service.Log({service:this._Name,level:"E",msg:`${error}`})}),ws.on("close",()=>{let index=this._Clients.indexOf(ws);this._Clients.splice(index,1),this._Proxy.RemoveSub(ws.key.hashed),H.Logger.Service.Log({service:this._Name,level:"I",msg:`Client disconnected. Key: ${ws.key.hashed}`}),Object.emit("disconnect")}),this._Clients.push(ws)})}Run(){try{this._Server.listen(this._Port)}catch(e){H.Logger.Service.Log({service:this._Name,level:"E",msg:`${e.message}`})}H.Logger.Service.Log({service:this._Name,level:"I",msg:`Listening to port ${this._Port}`})}Notify(data){H.Logger.Service.Log({service:this._Name,level:"D",msg:MSG_DEBUG_SEND}),this._Clients.forEach(client=>{client.send(data)})}}exports=ClassWSServer;