const STORAGE="Storage",WIFI="Wifi",WIZNET="WIZnet",MAIN_CONFIG="init.json",DEVICE_CONFIG="device.json",NETWORK_CONFIG="network.json",SERVICE_CONFIG="services.json",MQTT_CONFIG="MQTTClientConfig.json",SENSOR_ANCESTOR="plcSensor.min.js",ACTUATOR_ANCESTOR="plcActuator.min.js",BUS_NODE="bus",RTC_NODE="SysClock",LED_NODE="SysLED",BUZZ_NODE="SysBuzzer",DEFAULT_FILE=".bootcde",MSG_SENSOR_ANCESTOR="File 'plcSensor.min.js' is absent. You won't be able to create any sensors!",MSG_ACTUATOR_ANCESTOR="File 'plcActuator.min.js' is absent. You won't be able to create any actuators!",MSG_NO_NETWORK_CONFIG="Cannot find 'network.json'. Skipping network setup",MSG_BOOTUP_SUCCESS="Boot up sequence complete!",MSG_BOOTUP_ABORT="Not all primary services started or no primary services at all. Aborting. . .",MSG_RTC_SUCCESS="System time is set via RTC clock module",MSG_RTC_COMPLETE="RTC check complete. Clock syncronized",MSG_RTC_ADJUSTED="Date of RTC clock module adjusted",MSG_RTC_NOT_FOUND="RTC clock not found!",MSG_RTC_NOT_SPECIFIED="RTC clock is not specified in device.conf!",MSG_LED_NOT_SPECIFIED="System LED is not specified in device.conf!",MSG_BUZZ_NOT_SPECIFIED="System Buzzer is not specified in device.conf!",MSG_LED_FOUND="Found system LED at pin ",MSG_BUZZ_FOUND="Found system buzzer at pin ",MSG_LED_FAILED="Failed to set system LED:",MSG_BUZZ_FAILED="Failed to set system buzzer:",MSG_TIME_SET_FAIL="Failed to properly set system time!",MSG_TIME_SET_SUCCESS="System time set to",MSG_DRIVER_ERROR="Error loading driver",MSG_DRIVER_SUCCESS="Channels loaded:",MSG_DRIVER_WARNING="channel already exist!",MSG_MODULE_LOADED="loaded.",MSG_MODULE_FAILED="failed to load. Reason:",MSG_MODULE_UNDEFINED="Undefined in config file!",MSG_NET_STARTUP="Starting up Network. . .",MSG_NETWORK_SKIP="Network connection not specified. Skipping.",MSG_BOARD_ID="Board ID:",MSG_LOAD_FILE="LoadFile set to:",MSG_SUB="Subscribed to system events.",MSG_EMPTY="",MSG_MISSING="Missing",MSG_SPI_FAILED="Failed to set up SPI bus.",MSG_NOT_VALID_PIN="is not a valid pin",MSG_FATAL_CANT_FIND="Process | CRITICAL | Cannot find",TS_JAN_FIRST_2010=1262289600,TS_JAN_FIRST_2100=409968e4;class ClassProcess{constructor(){if(!process.env.MODULES.includes(STORAGE))throw`${MSG_FATAL_CANT_FIND} ${STORAGE}`;if(this._FileReader=require(STORAGE),!this._FileReader.list().includes(MAIN_CONFIG))throw`${MSG_FATAL_CANT_FIND} ${MAIN_CONFIG}`;if(!this._FileReader.list().includes(DEVICE_CONFIG))throw`${MSG_FATAL_CANT_FIND} ${DEVICE_CONFIG}`;if(!this._FileReader.list().includes(SERVICE_CONFIG))throw`${MSG_FATAL_CANT_FIND} ${SERVICE_CONFIG}`;if(this._LoadFile=this._FileReader.readJSON(MAIN_CONFIG,!0).application,this._DeviceConfig=this._FileReader.readJSON(MAIN_CONFIG,!0).deviceConf,!this.IsProgramInConfig(this._DeviceConfig)||void 0===this._DeviceConfig)throw`${MSG_FATAL_CANT_FIND} ${this._DeviceConfig} configuration.`;this._RTC=void 0,this._Newwork=void 0,this._HaveNet=!1,this._SysBuzzer=void 0,this._SysLED=void 0,this._Name="Process",this._IsFinished=!1}Run(){if(this._LoadFile!=this.GetAppName())load(this._LoadFile);else{let H=this._FileReader.readJSON(SERVICE_CONFIG,!0),startUpFlag=0;if(Object.defineProperty(global,"Process",{get:()=>this}),Object.defineProperty(global,"H",{get:()=>H}),this.PrintLogo(),this._BoardName=`${this._FileReader.readJSON(MAIN_CONFIG,!0).name||MSG_EMPTY}`,Object.values(H).filter(serv=>"Primary"===serv.Importance).sort((a,b)=>a.InitOrder-b.InitOrder).forEach(serv=>{try{serv.Service=new(require(serv.Dependency[0]))(serv.AdvancedOptions),this.SystemMessage("INFO",this.GetSuccessString(serv.Dependency[0])),serv.Status="running",startUpFlag|=1}catch(e){this.SystemMessage("WARN",this.GetFailString(serv.Dependency[0],e)),serv.ErrorMsg=e.toString(),startUpFlag|=2}}),1!=startUpFlag)return this.SystemMessage("ERROR",MSG_BOOTUP_ABORT),void load("SysDeadEnd");H.Logger.Service.Log({service:this._Name,level:"I",msg:`${MSG_BOARD_ID} ${this._BoardName} (${process.env.BOARD} ${process.env.SERIAL})`}),H.Logger.Service.Log({service:this._Name,level:"I",msg:`${MSG_LOAD_FILE} ${this._LoadFile}`}),this._FileReader.list().includes(SENSOR_ANCESTOR)||H.Logger.Service.Log({service:this._Name,level:"N",msg:MSG_SENSOR_ANCESTOR}),this._FileReader.list().includes(ACTUATOR_ANCESTOR)||H.Logger.Service.Log({service:this._Name,level:"N",msg:MSG_ACTUATOR_ANCESTOR}),this.InitSysEvents(),this.InitializeModuleDrives();try{if(!this._FileReader.list().includes(NETWORK_CONFIG))throw MSG_NO_NETWORK_CONFIG;let ethconf=this._FileReader.readJSON(NETWORK_CONFIG,!0).eth,wificonf=this._FileReader.readJSON(NETWORK_CONFIG,!0).wifi,netconf,bus,flag;if(1==ethconf.useEth){if(!process.env.MODULES.includes(WIZNET))throw`${MSG_MISSING} ${WIZNET}`;netconf=ethconf,H.Logger.Service.Log({service:this._Name,level:"I",msg:MSG_NET_STARTUP}),flag=2;let ethbus=netconf.bus;bus=SPIbus._SPIbus[ethbus.index].IDbus;let pins=[ethbus.mosi,ethbus.miso,ethbus.sck];pins.forEach(pin=>{try{let p=eval(pin);if(!(p instanceof Pin))throw 0;pin=p}catch(e){throw`${MSG_SPI_FAILED} ${pin} ${MSG_NOT_VALID_PIN}`}});try{bus.setup({baud:ethbus.baudrate,mosi:pins[0],miso:pins[1],sck:pins[2]})}catch(e){throw e}}else{if(1!=wificonf.useWifi)throw`${MSG_NETWORK_SKIP}`;if(netconf=wificonf,flag=1,H.Logger.Service.Log({service:this._Name,level:"I",msg:MSG_NET_STARTUP}),!process.env.MODULES.includes(WIFI)){let wfbus=netconf.bus;bus=H.UARTbus.Service._UARTbus[wfbus.index].IDbus,bus.setup(wfbus.baudrate)}}try{H.Network.Service.Init(netconf,bus,flag,res=>{this._HaveNet=res,this._HaveNet&&Object.values(H).filter(serv=>"Auxilary"===serv.Importance).sort((a,b)=>a.InitOrder-b.InitOrder).forEach(serv=>{try{serv.Service=new(require(serv.Dependency[0]))(serv.AdvancedOptions),this.SystemMessage("INFO",this.GetSuccessString(serv.Dependency[0])),serv.Status="running"}catch(e){this.SystemMessage("WARN",this.GetFailString(serv.Dependency[0],e)),serv.ErrorMsg=e.toString()}}),H.NTP&&"running"===H.NTP.Status||this.WrapStartUp()})}catch(e){throw e}}catch(e){H.Logger.Service.Log({service:this._Name,level:"I",msg:e.toString()}),this.WrapStartUp()}}}WrapStartUp(){this._IsFinished||(this._IsFinished=!0,this.SetSystemTime(),this.CheckSystemTime(),H.Logger.Service.Log({service:this._Name,level:"I",msg:MSG_BOOTUP_SUCCESS}),Object.emit("complete"))}InitSysEvents(){let on=!1,interval,conf=this._FileReader.readJSON(DEVICE_CONFIG,!0)[this._DeviceConfig];try{Object.keys(conf).includes(LED_NODE)?(this._SysLED=H.DeviceManager.Service.CreateDevice(LED_NODE)[0],H.Logger.Service.Log({service:this._Name,level:"i",msg:`${MSG_LED_FOUND+this._SysLED._ThisActuator._Pins[0]}`}),this._SysLED.SetValue(0)):H.Logger.Service.Log({service:this._Name,level:"W",msg:MSG_LED_NOT_SPECIFIED})}catch(e){H.Logger.Service.Log({service:this._Name,level:"E",msg:`${MSG_LED_FAILED} ${e.message}`})}try{Object.keys(conf).includes(BUZZ_NODE)?(this._SysBuzzer=H.DeviceManager.Service.CreateDevice(BUZZ_NODE)[0],H.Logger.Service.Log({service:this._Name,level:"i",msg:`${MSG_BUZZ_FOUND+this._SysBuzzer._ThisActuator._Pins[0]}`})):H.Logger.Service.Log({service:this._Name,level:"W",msg:MSG_BUZZ_NOT_SPECIFIED})}catch(e){H.Logger.Service.Log({service:this._Name,level:"E",msg:`${MSG_BUZZ_FAILED} ${e.message}`})}Object.on("complete",()=>{this._SysBuzzer&&this._SysBuzzer.SetValue(.4),this._SysLED&&this._SysLED.SetValue(1),Process._HaveNet&&setTimeout(()=>{this._SysBuzzer&&this._SysBuzzer.SetValue(.8)},100),setTimeout(()=>{this._SysBuzzer&&this._SysBuzzer.SetValue(0)},200)}),Object.on("connect",()=>{this._SysBuzzer&&this._SysBuzzer.SetValue(.5),setTimeout(()=>{this._SysBuzzer&&this._SysBuzzer.SetValue(.9),setTimeout(()=>{this._SysBuzzer&&this._SysBuzzer.SetValue(1),setTimeout(()=>{this._SysBuzzer&&this._SysBuzzer.SetValue(0)},100)},100)},500),interval=setInterval(()=>{on=!on,this._SysLED&&this._SysLED.SetValue(.5+.5*on)},500)}),Object.on("disconnect",()=>{this._SysBuzzer&&this._SysBuzzer.SetValue(1),setTimeout(()=>{this._SysBuzzer&&this._SysBuzzer.SetValue(.6),setTimeout(()=>{this._SysBuzzer&&this._SysBuzzer.SetValue(.5),setTimeout(()=>{this._SysBuzzer&&this._SysBuzzer.SetValue(0)},100)},100)},500),clearInterval(interval),this._SysLED&&this._SysLED.SetValue(1)}),Object.on("ntp_done",()=>{this.WrapStartUp()}),Object.on("proc-get-systemdata",()=>{let packet={com:"proc-return-systemdata",args:[this._BoardName,process.env.SERIAL]};Object.emit("proc-return",packet)}),H.Logger.Service.Log({service:this._Name,level:"I",msg:MSG_SUB})}InitializeModuleDrives(){let conf=this._FileReader.readJSON(DEVICE_CONFIG,!0)[this._DeviceConfig],driverArr=new Array;Object.keys(conf).forEach(driver=>{if(driver!=BUS_NODE&&driver!=LED_NODE&&driver!=BUZZ_NODE&&driver!=RTC_NODE)try{let instance;H.DeviceManager.Service.CreateDevice(driver).forEach(channel=>{driverArr.includes(channel.Name)?H.Logger.Service.Log({service:this._Name,level:"W",msg:`${channel.Name} ${MSG_DRIVER_WARNING}`}):(Object.defineProperty(global,channel.Name,{get:()=>channel}),driverArr.push(channel.Name))})}catch(e){H.Logger.Service.Log({service:this._Name,level:"E",msg:`${MSG_DRIVER_ERROR} ${e.message}`})}}),driverArr.length>0&&H.Logger.Service.Log({service:this._Name,level:"I",msg:`${MSG_DRIVER_SUCCESS} ${driverArr.join()}`})}GetAppName(){try{return __FILE__}catch(e){return DEFAULT_FILE}}GetBoardName(){return`${process.env.BOARD} ${process.env.SERIAL} ${this._BoardName}`}GetDeviceConfig(id){return((this._FileReader.readJSON(DEVICE_CONFIG,!0)||{})[this._DeviceConfig]||{})[id]}GetBusesConfig(){return this._FileReader.readJSON(DEVICE_CONFIG,!0)[this._DeviceConfig][BUS_NODE]}GetMQTTClientConfig(){return this._FileReader.readJSON(MQTT_CONFIG,!0)[this._DeviceConfig]}SetSystemTime(){try{let conf=this._FileReader.readJSON(DEVICE_CONFIG,!0)[this._DeviceConfig];if(!Object.keys(conf).includes(RTC_NODE))throw{message:MSG_RTC_NOT_SPECIFIED};this._RTC=H.DeviceManager.Service.CreateDevice(RTC_NODE)[0];let ts=this._RTC._Sensor.GetTimeUnix(),sys_t=Math.floor((new Date).getTime()/1e3);if(ts<=TS_JAN_FIRST_2010||ts>=TS_JAN_FIRST_2100){if(this._RTC._Sensor.SetTime(new Date),ts=this._RTC._Sensor.GetTimeUnix(),ts<=TS_JAN_FIRST_2010||ts>=TS_JAN_FIRST_2100)throw{message:MSG_RTC_NOT_FOUND};H.Logger.Service.Log({service:this._Name,level:"I",msg:MSG_RTC_ADJUSTED})}(sys_t<=TS_JAN_FIRST_2010||sys_t>=TS_JAN_FIRST_2100)&&(setTime(ts),H.Logger.Service.Log({service:this._Name,level:"I",msg:MSG_RTC_SUCCESS})),H.Logger.Service.Log({service:this._Name,level:"I",msg:MSG_RTC_COMPLETE})}catch(e){H.Logger.Service.Log({service:this._Name,level:"E",msg:e.message})}}CheckSystemTime(){let final_t_check=Math.floor((new Date).getTime()/1e3);final_t_check<=TS_JAN_FIRST_2010||final_t_check>=TS_JAN_FIRST_2100?H.Logger.Service.Log({service:this._Name,level:"W",msg:MSG_TIME_SET_FAIL}):H.Logger.Service.Log({service:this._Name,level:"I",msg:`${MSG_TIME_SET_SUCCESS} ${this.GetSystemTime()}`})}GetSystemTime(){let date=new Date;return date.getFullYear()+"-"+("0"+(date.getMonth()+1)).substr(-2)+"-"+("0"+date.getDate()).substr(-2)+" "+("0"+date.getHours()).substr(-2)+":"+("0"+date.getMinutes()).substr(-2)+":"+("0"+date.getSeconds()).substr(-2)}IsProgramInConfig(filename){return Boolean(this._FileReader.readJSON(DEVICE_CONFIG,!0)[filename])}GetSuccessString(moduleName){return`${moduleName.substring(0,moduleName.indexOf("."))} ${MSG_MODULE_LOADED}`}GetFailString(moduleName,reason){return void 0===moduleName?`${moduleName}: ${MSG_MODULE_UNDEFINED}`:`${moduleName.substring(0,moduleName.indexOf("."))} ${MSG_MODULE_FAILED} ${reason.message}`}PrintLogo(){console.log("    __  __           _                          _______"),console.log("   / / / /___  _____(_)___  ____  ____         / / ___/"),console.log("  / /_/ / __ \\/ ___/ /_  / / __ \\/ __ \\   __  / /\\__ \\ "),console.log(" / __  / /_/ / /  / / / /_/ /_/ / / / /  / /_/ /___/ / "),console.log("/_/ /_/\\____/_/  /_/ /___/\\____/_/ /_/   \\____//____/  "),console.log(""),console.log("Based on Horizon Automated v0.9.1")}SystemMessage(_lvl,_msg){try{H.Logger.Service.Log({service:this._Name,level:_lvl,msg:_msg})}catch(e){console.log(`[${this.GetSystemTime()}] ${this._Name} | ${_lvl} | ${_msg}`)}}}exports=ClassProcess;