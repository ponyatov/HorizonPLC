const ClassSensor=require("plcSensor.min.js");class ClassAirMethaneMQ4 extends ClassSensor{constructor(_opts,_sensor_props){ClassSensor.apply(this,[_opts,_sensor_props]),this._Name="ClassAirMethaneMQ4",this._Sensor=require("BaseClassMQX.min.js").connect({dataPin:_opts.pins[0],heatPin:_opts.pins[1],model:"MQ4",r0:_opts.baseline}),this._MinPeriod=250,this._UsedChannels=[],this._Interval,this._CanRead=!0,this.Init(_sensor_props)}Init(_sensor_props){super.Init(_sensor_props)}ControlHeater(_val){this._Sensor.heat(_val)}Preheat(){this._CanRead=!1,console.log("Beginning to preheat MQ-4..."),this._Sensor.preheat(()=>{console.log("MQ-4 is heated!"),this._CanRead=!0})}Calibrate(_val){this._Sensor.calibrate(_val)}Start(_num_channel,_period){let period="number"==typeof _period&_period>=this._MinPeriod?_period:this._MinPeriod;this._UsedChannels.includes(_num_channel)||this._UsedChannels.push(_num_channel),this._Interval||(this._Interval=setInterval(()=>{this._UsedChannels.includes(0)&&(this.Ch0_Value=this._CanRead?this._Sensor.read("CH4"):0)},period))}ChangeFreq(_num_channel,freq){clearInterval(this._Interval),setTimeout(()=>this.Start(freq),this._Minfrequency)}Stop(_num_channel){_num_channel?this._UsedChannels.splice(this._UsedChannels.indexOf(_num_channel)):(this._UsedChannels=[],clearInterval(this._Interval),this._Interval=null)}}exports=ClassAirMethaneMQ4;