const MSG_ERR="NTP error: ",MSG_UPDATE="Time updated",MSG_SKT_CLOSED="UDP socket closed",MSG_TIMEOUT="Request timed out";class ClassNTP{constructor(options){if(this.Instance)return this.Instance;ClassNTP.prototype.Instance=this,this._Name="NTP",this._Host=options.host||"127.0.0.1",this._Port=options.port||123,this._Tz=options.tz||"0",this.SetNTP()}SetNTP(){let tOut=setTimeout(()=>{H.Logger.Service.Log({service:this._Name,level:"I",msg:MSG_TIMEOUT}),Object.emit("ntp_done")},5e3);try{switch(H.Network.Service._ChipType){case"esp32":H.Network.Service._Core.setSNTP(this._Host,this._Tz),clearTimeout(tOut),E.setTimeZone(this._Tz),H.Logger.Service.Log({service:this._Name,level:"I",msg:MSG_UPDATE}),Object.emit("ntp_done");break;case"W5500":case"esp8266":default:const socket=require("dgram").createSocket("udp4");let message=new Uint8Array(48);socket.on("error",err=>{clearTimeout(tOut),H.Logger.Service.Log({service:this._Name,level:"E",msg:`${MSG_ERR} ${err.message}!`}),Object.emit("ntp_done")}),socket.on("message",(msg,rinfo)=>{let buffer=E.toArrayBuffer(msg);const dv=new DataView(buffer),timestamp=this.NTPtoMsecs(dv,40);setTime(timestamp/1e3),clearTimeout(tOut),E.setTimeZone(this._Tz),H.Logger.Service.Log({service:this._Name,level:"I",msg:MSG_UPDATE}),Object.emit("ntp_done")}),socket.on("close",()=>{clearTimeout(tOut),H.Logger.Service.Log({service:this._Name,level:"I",msg:MSG_SKT_CLOSED})}),message[0]=27;for(let i=1;i<48;i++)message[i]=0;socket.send(E.toString(message),this._Port,this._Host,(err,bytes)=>{(err||48!==bytes)&&H.Logger.Service.Log({service:this._Name,level:"E",msg:`${MSG_ERR} ${err}`})})}}catch(e){H.Logger.Service.Log({service:this._Name,level:"E",msg:`${e}`})}}NTPtoMsecs(dv,offset){let seconds,fraction;return 1e3*(dv.getUint32(offset)-2208988800+dv.getUint32(offset+4)/Math.pow(2,32))}}exports=ClassNTP;