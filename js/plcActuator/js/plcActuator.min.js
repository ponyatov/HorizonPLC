class ClassBaseActuator{constructor(_opts){if(this._Bus=_opts.bus,this._Pins=_opts.pins,this._Address=_opts.address,this._Id=_opts.id,this._Article=_opts.article,this._QuantityChannel=_opts.quantityChannel,this._Name=_opts.name,this._Type=_opts.type,this._ChannelNames=_opts.channelNames,this.CheckProps(),"hybrid"===this._Type.toLowerCase())try{this._SubChannels=_opts.subChannels.map(_subChId=>{let dev_id=_subChId.split("-")[0],chNum=_subChId.split("-")[1];return H.DeviceManager.Service.CreateDevice(dev_id)[chNum]})}catch(e){throw H.Logger.Service.Log({service:this._Id,level:"E",msg:"Error while parsing subChannels option"}),e}}CheckProps(){const isString=p=>"string"==typeof p,isStringNonEmpty=p=>"string"==typeof p&&p.length>0,isNumberPositive=p=>"number"==typeof p&&p>0,isOptionalString=p=>!p||isStringNonEmpty(p),isOptionalStringArray=p=>!p||Array.isArray(p)&&p.every(i=>isString(i));if(!isStringNonEmpty(this._Id))throw new Error("Invalid id");if(!isStringNonEmpty(this._Article))throw new Error("Invalid article");if(!isStringNonEmpty(this._Name))throw new Error("Invalid name");if(!isStringNonEmpty(this._Type))throw new Error("Invalid type");if(!isNumberPositive(this._QuantityChannel))throw new Error("Invalid quantityChannel");if(!isOptionalStringArray(this._ChannelNames))throw new Error("Invalid channelNames");if(this._Bus instanceof I2C&&"number"!=typeof+this._Address)throw new Error("Address of i2c device is not provided")}}class ClassActuator extends ClassBaseActuator{constructor(_opts){ClassBaseActuator.call(this,_opts),this._Channels=Array(this._QuantityChannel);for(let i=0;i<this._QuantityChannel;i++)_opts.channelsConfig=_opts.channelsConfig||[],this._Channels[i]=new ClassChannelActuator(this,i,_opts.channelsConfig[i])}get ID(){return this._Id}get CountChannels(){return this._Channels.filter(o=>o instanceof ClassChannelActuator).length}GetChannel(_num){return this._Channels[_num]}InitTasks(){}GetInfo(_chNum,_opts){}Init(_opts){}SetValue(_chNum,_val,_opts){}SetValue(_chNum,_opts){}Off(_chNum,_opts){}Configure(_chNum,_opts){}Reset(_chNum){}Read(_reg){}Write(_reg,_val){}}class ClassChannelActuator{constructor(actuator,num,_opts){if(actuator._Channels[num]instanceof ClassChannelActuator)return actuator._Channels[num];let opts=_opts||{};this._Tasks={},this._ActiveTask=null,this._ThisActuator=actuator,this._ChNum=num,this._Transform=new ClassTransform(this),this._Suppression=new ClassSuppression(this),this._Status=0,this.Address=opts.address}get Device(){return this._ThisActuator}get Suppression(){return this._Suppression}get Transform(){return this._Transform}get ID(){return`${this._ThisActuator.ID}-${this._ChNum}`}get Name(){return this._ThisActuator._ChannelNames[this._ChNum]}get Status(){return this._Status}set Status(_s){return"number"==typeof _s&&(this._Status=_s),this._Status}get ActiveTask(){for(let key in this._Tasks)if(this._Tasks[key]._IsActive)return this._Tasks[key];return null}InitTasks(){return this._ThisActuator.InitTasks(this._ChNum)}SetValue(_val,_opts){let val=this._Suppression.SuppressValue(_val);return val=this._Transform.TransformValue(val),!!this._ThisActuator.SetValue(this._ChNum,val,_opts)&&this}Reset(_opts){return this._ThisActuator.Reset(this._ChNum,_opts)}Configure(_opts){return!!this._ThisActuator.Configure(this._ChNum,_opts)&&this}AddTask(_name,_func){if("string"!=typeof _name||"function"!=typeof _func)throw new Error("Invalid arg");return this._Tasks[_name]=new ClassTask(this,_func),this}RemoveTask(_name){return delete this._Tasks[_name]}RunTask(_name,_arg1,_arg2){if(!this._Tasks[_name])return!1;let args=[].slice.call(arguments,1);return this._Tasks[_name].Invoke(args)}ResolveTask(_code){this.ActiveTask.Resolve(_code||0)}CancelTask(){return!!this.ActiveTask&&(this.ActiveTask.Resolve(),!0)}GetInfo(_opts){return this._ThisActuator.GetInfo(this._ChNum,_opts)}}class ClassTask{constructor(_channel,_func){this.name="ClassTask",this._Channel=_channel,this._IsActive=!1,this._Func=_func.bind(this._Channel)}Invoke(args){let promisified;return new Promise((res,rej)=>(this.resolve=res,this.reject=rej,this._Channel.ActiveTask?this.Reject(-1):(this._IsActive=!0,this._Func.apply(this._Channel,args))))}Resolve(_code){return this._IsActive=!1,this.resolve(_code||0)}Reject(_code){return this._IsActive=!1,this.reject(_code||-1)}}class ClassTransform{constructor(_ch){this._Channel=_ch,this._TransformFunc=x=>x}SetFunc(_func){return _func?"function"==typeof _func&&(this._TransformFunc=_func,this._Channel):(this._TransformFunc=null,!0)}SetLinearFunc(_k,_b){if("number"!=typeof _k||"number"!=typeof _b)throw new Error("k and b must be values");return this._TransformFunc=x=>_k*x+_b,this._Channel}TransformValue(val){return this._TransformFunc(val)}}class ClassSuppression{constructor(_ch){this._Channel=_ch,this._Low,this._High,this.SetLim(-1/0,1/0)}SetLim(_limLow,_limHigh){if("number"!=typeof _limLow||"number"!=typeof _limHigh)throw new Error("Not a number");if(_limLow>=_limHigh)throw new Error("limLow value should be less than limHigh");return this._Low=_limLow,this._High=_limHigh,this._Channel}SuppressValue(_val){return E.clip(_val,this._Low,this._High)}}exports=ClassActuator;