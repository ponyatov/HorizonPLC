const ClassSensor=require("plcSensor.min.js");class ClassAirQualityCCS811 extends ClassSensor{constructor(_opts,_sensor_props){ClassSensor.apply(this,[_opts,_sensor_props]),this._Name="ClassAirQualityCCS811",this._Sensor=require("BaseClassCCS811.min.js").connect(_opts.bus,_opts.address,_opts.mode),this._MinPeriod=250,this._UsedChannels=[],this._Interval,this._Margin={},this._Margin.temp=_opts.temp,this._Margin.hum=_opts.hum,this._CanRead=!0,this.Init(_sensor_props)}Init(_sensor_props){super.Init(_sensor_props),this._Sensor.init(),this._Margin.hum&&this._Margin.temp&&this.SetTempHumMargin()}SetTempHumMargin(_margin){_margin&&(this._Margin=_margin),this._Sensor.setEnvData(this._Margin.hum,this._Margin.temp)}Start(_num_channel,_period){let period="number"==typeof _period&_period>=this._MinPeriod?_period:this._MinPeriod,data;this._UsedChannels.includes(_num_channel)||this._UsedChannels.push(_num_channel),this._Interval||(this._Interval=setInterval(()=>{this._CanRead&&(data=this._Sensor.get()),this._UsedChannels.includes(0)&&(this.Ch0_Value=0|data.eCO2),this._UsedChannels.includes(1)&&(this.Ch1_Value=0|data.TVOC)},period))}ChangeFreq(_num_channel,freq){clearInterval(this._Interval),setTimeout(()=>this.Start(freq),this._Minfrequency)}ConfigureRegs(_opts){Number.isInteger(_opts.mode)&&_opts.mode>=0&&_opts.mode<=4&&(this._CanRead=!1,setTimeout(()=>{this._Sensor.setMode(_opts.mode)},1e4),this._CanRead=!0)}Stop(_num_channel){_num_channel?this._UsedChannels.splice(this._UsedChannels.indexOf(_num_channel)):(this._UsedChannels=[],clearInterval(this._Interval),this._Interval=null)}}exports=ClassAirQualityCCS811;