const ClassSensor=require("plcSensor"),ClassActuator=require("plcActuator"),POLLING_FREQ=5;class ClassDeviceManager{constructor(){if(this.Instance)return this.Instance;ClassDeviceManager.prototype.Instance=this,this._Devices=[],Object.on("dm-sub-sensorall",_msg=>{this.OnSubSensall(),this._Interval||this.StartPolling(POLLING_FREQ)}),Object.on("dm-stop-polling",this.StopPolling.bind(this)),Object.on("dm-deviceslist-get",this.OnDevicesListGet.bind(this)),Object.on("dm-actuator-set",this.ActuatorSet.bind(this)),this.InitBuses()}get Devices(){return this._Devices}get Sensors(){return this._Devices.filter(device=>device instanceof ClassSensor)}get Actuators(){return this._Devices.filter(device=>device instanceof ClassActuator)}get Channels(){let ch_list=[];return this.Devices.forEach(_dev=>{_dev._Channels.forEach(_ch=>ch_list.push(_ch))}),ch_list}get SensorChannels(){let ch_list=[];return this.Sensors.forEach(_dev=>{_dev._Channels.forEach(_ch=>ch_list.push(_ch))}),ch_list}get ActuatorChannels(){let ch_list=[];return this.Actuators.forEach(_dev=>{_dev._Channels.forEach(_ch=>ch_list.push(_ch))}),ch_list}GetSublist(){return{sensor:this.SensorChannels.filter(_ch=>_ch.Address).map(_ch=>({name:_ch.ID,address:_ch.Address})),actuator:this.ActuatorChannels.filter(_ch=>_ch.Address).map(_ch=>({name:_ch.ID,address:_ch.Address}))}}GetLHPDevlist(){let value={sensor:[],actuator:[]};return this.ActuatorChannels.forEach(_ch=>{value.sensor.push(`${_ch.Device._Article}-${ch.ID}`)}),this.SensorChannels.forEach(_ch=>{value.actuator.push(`${_ch.Device._Article}-${ch.ID}`)}),value}InitBuses(){let config=Process.GetBusesConfig();for(let busName of Object.keys(config))try{let opts=config[busName],busObj;for(let option of Object.keys(opts))"bitrate"!==option&&(opts[option]=this.GetPinByStr(opts[option]));busName.startsWith("I2C")&&(busObj=H.I2Cbus.Service.AddBus(opts)),busName.startsWith("SPI")&&(busObj=H.SPIbus.Service.AddBus(opts)),busName.startsWith("UART")&&(busObj=H.UARTbus.Service.AddBus(opts))}catch(e){H.Logger.Log({service:"dm",level:"E",msg:`Failed to init bus ${busname}`})}}AddDevice(device){!this.GetDevice(device.ID)&&device.ID&&this._Devices.push(device)}GetDevice(id){return this._Devices.find(dev=>dev.ID===id)}GetChannel(chId){for(let i=0;i<this.Devices.length;i++){let ch=this.Devices[i]._Channels.find(_ch=>_ch.ID===chId);if(ch)return ch}}StartPolling(_freq){const freq=_freq||5;if("number"!=typeof freq||freq<=0)return!1;const valIsEqual=(a,b,x)=>Math.abs(a-b)<=Math.abs(a)*(x/100);let data_cache={};return this._Interval=setInterval(()=>{this.Sensors.forEach(_sens=>{_sens._Channels.filter(ch=>ch.Status).forEach(ch=>{if(!valIsEqual(ch.Value,data_cache[ch.ID],ch.ChangeThreshold)){let data_package={com:"all-data-raw-get",arg:[ch.ID],value:[ch.Value]};data_cache[ch.ID]=ch.Value,this.SendData(data_package)}})})},1/freq*1e3),!0}StopPolling(){this._Interval&&clearInterval(this._Interval),this._Interval=null}OnDevicesListGet(_msg){let msg={com:"dm-deviceslist-set",value:[this.GetLHPDevlist()]};this.SendWS(msg)}OnSubSensall(_msg){let source=_msg.metadata&&_msg.metadata.source?_msg.metadata.source:void 0;if(!source)return;let msg={com:`${source}-sub-sensorall`,value:[this.GetSublist()]};Object.emit(msg.com,msg)}SendWS(_msg){Object.emit("proxyws-send",_msg)}SendData(_msg){Object.emit("all-data-raw-get",_msg)}ActuatorSet(_msg){const id=_msg.arg[0],val=+_msg.value[0];let act_ch=this.GetChannel(id);act_ch&&"function"==typeof act_ch.SetValue&&act_ch.SetValue(val)}ExecuteCom(arg){let id=arg.shift(),methodName=arg.shift(),device=this.GetChannel(id);return!!device&&("function"==typeof device[methodName]&&(device[methodName].apply(device,arg),!0))}IsIDAvailable(_id){return!Boolean(this.Devices.find(device=>device.ID===_id))}ArePinsAvailable(_pins){for(let i=0;i<_pins.length;i++)if(this.Devices.find(device=>device._Pins.includes(_pins[i])))return!1;return!0}CreateDevice(id,opts){if(opts=opts||{moduleNum:0},"string"!=typeof id)return void console.log("ERROR>> id argument must to be a string");let dev=this.Devices.find(d=>d.ID===id);if(dev)return dev._Channels;let sensorConfig=Process.GetDeviceConfig(id);if(!sensorConfig)return void console.log(`ERROR>> Failed to get ${id} config"`);let module=require(sensorConfig.modules[opts.moduleNum]);if(opts.key&&(module=module[key]),!module)return void console.log(`ERROR>> Cannot load ${sensorConfig.module}"`);if(sensorConfig.bus&&(sensorConfig.bus=this.GetBusByID(sensorConfig.bus)),sensorConfig.pins=sensorConfig.pins||[],sensorConfig.pins=sensorConfig.pins.map(strPin=>this.GetPinByStr(strPin)),sensorConfig.id=id,!this.ArePinsAvailable(sensorConfig.pins))return void console.log(`ERROR>> Pins [${opts.pins.join(", ")}] are already used`);let device=new module(sensorConfig,sensorConfig);return this.AddDevice(device),device._Channels}GetPinByStr(strPin){let p;try{p=eval(strPin)}catch(e){}if(p instanceof Pin)return p;throw new Error(`ERROR>> Pin ${p} doesn't exist`)}GetBusByID(_bus){let bus;return _bus.startsWith("I2C")?bus=H.I2Cbus.Service._I2Cbus[_bus].IDbus:bus.startsWith("SPI")?_bus=H.SPIbus.Service._SPIbus[_bus].IDbus:bus.startsWith("UART")&&(_bus=H.UARTbus.Service._UARTbus[_bus].IDbus),bus}}exports=ClassDeviceManager;