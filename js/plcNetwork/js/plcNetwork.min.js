const MSG_WIFI_CONNECTED="Connected! IP: ",FLAG_ETHERNET=2,FLAG_WIFI=1,MSG_TIMEOUT="Failed to connect in 10 seconds.";class ClassWifi{constructor(options){if(this.Instance)return this.Instance;ClassWifi.prototype.Instance=this,this._Name="Network",this._Core,this._ChipType,this._Ssid,this._Scan,this._Ip,this._BaseModule=options.baseModule}Init(nc,bus,flag,callback){if(flag&FLAG_ETHERNET)this._ChipType="W5500",this.EtherSequence(nc,bus,callback);else if(flag&FLAG_WIFI)if(bus){if(void 0===this._BaseModule)return H.Logger.Service.Log({service:this._Name,level:"E",msg:"Base module for WiFi is not specified. Aborting. . ."}),void callback(!1);this._ChipType="esp8266",this._Core=require(this._BaseModule).setup(bus,err=>{err?(H.Logger.Service.Log({service:this._Name,level:"E",msg:err}),callback(!1)):(H.Logger.Service.Log({service:this._Name,level:"I",msg:"Using ESP8266."}),this.WifiSequence(nc,callback))})}else this._ChipType="esp32",this._Core=require("Wifi"),H.Logger.Service.Log({service:this._Name,level:"I",msg:"Found build-in library."}),this.WifiSequence(nc,callback)}EtherSequence(nc,bus,callback){let cs=eval(nc.bus.cs);if(!(cs instanceof Pin))return H.Logger.Service.Log({service:this._Name,level:"E",msg:`Chip Select pin ${cs} cannot be found!`}),void callback(!1);this._Core=require("WIZnet").connect(bus,cs),H.Logger.Service.Log({service:this._Name,level:"I",msg:"Connecting via Ethernet. . ."}),setTimeout(()=>{this._Core.setIP(),H.Logger.Service.Log({service:this._Name,level:"I",msg:`Done! IP: ${this._Core.getIP().ip}`}),callback(!0)},5e3)}WifiSequence(nc,callback){this.GetAPCreds(nc,pass=>{this.Connect(pass,res=>{this.SetStatic(nc,()=>{callback(res)})})})}GetAPCreds(nc,callback){if(-1==nc.scan)H.Logger.Service.Log({service:this._Name,level:"I",msg:"Scanning the net. . ."}),this._Core.scan((err,scn)=>{this._Scan=scn;let pass=this.GetNetPassword(this._Scan);callback(pass)});else{this._Ssid=nc.accpoints[nc.scan].ssid;let pass=nc.accpoints[nc.scan].pass;H.Logger.Service.Log({service:this._Name,level:"I",msg:"Net scan skipped."}),callback(pass)}}Connect(pass,callback){H.Logger.Service.Log({service:this._Name,level:"I",msg:`Got credentials. Attempting establish connection to ${this._Ssid}.`});let tOut=setTimeout(()=>{H.Logger.Service.Log({service:this._Name,level:"I",msg:MSG_TIMEOUT}),callback(!1)},1e4);this._Core.connect(this._Ssid,{password:pass},err=>{err?(clearTimeout(tOut),H.Logger.Service.Log({service:this._Name,level:"E",msg:`Conncetion failed: ${err}`}),callback(!1)):this._Core.getIP((err,info)=>{err?(H.Logger.Service.Log({service:this._Name,level:"E",msg:"Cannot get proveded IP"}),clearTimeout(tOut),callback(!1)):(clearTimeout(tOut),this._Ip=info.ip,H.Logger.Service.Log({service:this._Name,level:"I",msg:`${MSG_WIFI_CONNECTED+this._Ip}`}),callback(!0))})})}SetStatic(nc,callback){if(1==nc.usestatic){let settings={ip:nc.staticconf.ip,gw:nc.staticconf.gw,netmask:nc.staticconf.nm};this._Core.setIP(settings,err=>{err?H.Logger.Service.Log({service:this._Name,level:"E",msg:"Failed to set static IP address"}):H.Logger.Service.Log({service:this._Name,level:"I",msg:`Static IP set to ${nc.staticconf.ip}`}),callback()})}else H.Logger.Service.Log({service:this._Name,level:"I",msg:"Static IP setup skipped!"}),callback()}GetNetPassword(_aps){let found,pass;return this._Scan.map(a=>a.ssid).forEach(fName=>{_aps.forEach(sName=>{fName==sName.ssid&&(this._Ssid=sName.ssid,pass=sName.pass)})}),pass}UDPHost(_host,_port){}GetSocksData(){"esp8266"===this._ChipType?this._Core.getSocks(d=>{H.Logger.Service.Log({service:this._Name,level:"I",msg:`Socket data: ${d}`})}):H.Logger.Service.Log({service:this._Name,level:"I",msg:"Socket info not supported for current chip!"})}}exports=ClassWifi;