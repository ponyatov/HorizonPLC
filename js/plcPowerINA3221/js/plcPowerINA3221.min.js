const ClassSensor=require("plcSensor.min.js");class LowLevelClassINA3221{constructor(bus,address){this._I2c=bus,this._Address=address||64}ReadWord(_reg){this._I2c.writeTo(this._Address,128|_reg);const data=this._I2c.readFrom(this._Address,2);return data[0]<<8|data[1]}WriteWord(_reg,_data){this._I2c.writeTo(this._Address,[_reg,_data>>8,_data])}WhoIam(_wai){return this.ReadWord(254)!==(_wai||21577)}Reset(){this.WriteWord(0,32768)}UnsignedToSigned(_val){return 32768&_val?_val-65536:_val}ReadShuntVoltageRaw(_chn){return this.UnsignedToSigned(this.ReadWord(1+(_chn-1<<1)))}ReadBusVoltageRaw(_chn){return this.UnsignedToSigned(this.ReadWord(2+(_chn-1<<1)))}EnableChannel(_chn){let cfg=ReadWord(0);const chn={1:16384,2:8192,3:4096};cfg|=chn[_chn],this.WriteWord(0,cfg)}DisableChannel(_chn){let cfg=ReadWord(0);const chn={1:49151,2:57343,3:61439};cfg&=chn[_chn],this.WriteWord(0,cfg)}ConfigureAveraging(_val){let cfg=this.ReadWord(0);cfg&=61951;const avg={1:0,4:512,16:1024,64:1536,128:2048,256:2560,512:3072,1024:3584};cfg|=avg[_val],this.WriteWord(0,cfg)}ConfigureBusConvertion(_val){let cfg=this.ReadWord(0);cfg&=65087;const bct={140:0,204:64,332:128,588:192,1100:256,2116:320,4156:384,8244:448};cfg|=bct[_val],this.WriteWord(0,cfg)}ConfigureShuntConvertion(_val){let cfg=this.ReadWord(0);cfg&=65479;const sct={140:0,204:8,332:16,588:24,1100:32,2116:40,4156:48,8244:56};cfg|=sct[_val],this.WriteWord(0,cfg)}ConfigureMode(_val){let cfg=this.ReadWord(0);cfg&=65528,cfg|=_val,this.WriteWord(0,cfg)}}class ClassPowerINA3221 extends ClassSensor{constructor(_opts){ClassSensor.call(this,_opts),this._Name="ClassPowerINA3221",this._Sensor=new LowLevelClassINA3221(_opts.bus,_opts.address),this._Config=_opts.config||{},this._MinPeriod=20,this._Interval,this.Init()}Init(){this._Sensor.Reset();let channels=this._Config.channels||[1,2,3];this._Config.rShunts=this._Config.rShunts||[.1,.1,.1],this._Config.averaging=this._Config.averaging||0,this._Config.busConvert=this._Config.busConvert||1100,this._Config.shuntConvert=this._Config.shuntConvert||1100,this._Config.mode=this._Config.mode||7,this._Config.vbus=this._Config.vbus||0,this.EnableChannels(channels),this.Configure(0,this._Config)}Configure(_num_channel,_cfg){if("object"==typeof _cfg){if(_cfg.avr){const avr=[1,4,16,64,128,256,512,1024];avr.includes(_cfg.avr)&&(this._Sensor.ConfigureAveraging(_cfg.avr),this._Config.averaging=_cfg.avr)}if(_cfg.bcnv){const us=[140,204,332,588,1100,2116,4156,8244];us.includes(_cfg.bcnv)&&(this._Sensor.ConfigureBusConvertion(_cfg.bcnv),this._Config.busConvert=_cfg.bcnv)}if(_cfg.scnv){const uss=[140,204,332,588,1100,2116,4156,8244];uss.includes(_cfg.scnv)&&(this._Sensor.ConfigureShuntConvertion(_cfg.scnv),this._Config.shuntConvert=_cfg.scnv)}if(null!=_cfg.mode){const modes=[0,1,2,3,4,5,6,7];modes.includes(_cfg.mode)&&(this._Sensor.ConfigureMode(_cfg.mode),this._Config.mode=_cfg.mode)}null!=_cfg.vbus&&(this._Config.vbus=_cfg.vbus)}}EnableChannels(_arr){const chn=[1,2,3];Array.isArray(_arr)&&_arr.forEach(e=>{chn.includes(e)&&!this._Config.channels.includes(e)&&(this._Config.channels.push(e),this._Sensor.EnableChannel(e))})}DisableChannels(_arr){const chn=[1,2,3];Array.isArray(_arr)&&_arr.forEach(e=>{if(chn.includes(e)&&this._Config.channels.includes(e)){const index=this._Config.channels.indexOf(e);this._Config.channels.splice(index,1),this._Sensor.DisableChannel(e)}})}GetShuntVoltage(_chn){let res=0;return this._Config.channels.includes(_chn)&&(res=.005*this._Sensor.ReadShuntVoltageRaw(_chn)),res}GetBusVoltage(_chn){let res=0;return this._Config.channels.includes(_chn)&&(res=.001*this._Sensor.ReadBusVoltageRaw(_chn)),res}Start(_num_channel,_period){if(this._Channels[_num_channel].Status=1,!this._Interval){let period="number"==typeof _period&_period>=this._MinPeriod?_period:this._MinPeriod;this._Interval=setInterval(()=>{for(let i=0;i<3;i++)this._Config.channels.includes(i+1)&&(this._Channels[0+4*i].Status&&(this._Channels[0+4*i].Value=.005*this._Sensor.ReadShuntVoltageRaw(i+1)),this._Channels[1+4*i].Status&&(this._Channels[1+4*i].Value=.001*this._Sensor.ReadBusVoltageRaw(i+1)),this._Channels[2+4*i].Status&&(this._Channels[2+4*i].Value=this._Channels[0+4*i].Value/this._Config.rShunts[i]/1e3),this._Channels[3+4*i].Status&&(this._Channels[3+4*i].Value=this._Channels[2+4*i].Value*(0!=this._Config.vbus?this._Config.vbus:this._Channels[1+4*i].Value)))},period)}}ChangeFreq(_num_channel,freq){clearInterval(this._Interval),setTimeout(()=>this.Start(freq),this._MinPeriod)}Stop(_num_channel){let rest=0;this._ChStatus[_num_channel]=0,this._ChStatus.forEach(st=>{0==st&&rest++}),0==rest&&(clearInterval(this._Interval),this._Interval=null)}}exports=ClassPowerINA3221;