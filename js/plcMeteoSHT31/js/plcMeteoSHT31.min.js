const ClassSensor=require("plcSensor.min.js");class ClassSHT31 extends ClassSensor{constructor(_opts,_sensor_props){ClassSensor.apply(this,[_opts,_sensor_props]),this._Name="ClassSHT31",this._Sensor=require("BaseClassSHT31.min.js").connect(_opts.bus,_opts.address,_opts.repeatability),this._MinPeriod=250,this._UsedChannels=[],this._Interval}Init(_sensor_props){super.Init(_sensor_props),this._Sensor.init()}Reset(){return this._Sensor.reset(),"Sensor reset"}GetData(){this._Sensor.get((function(d){console.log("Temperature:",d.temp),console.log("Humidity:",d.hum)}))}Start(_num_channel,_period){this._Channels[0].Status=1,this._Channels[1].Status=1;let period="number"==typeof _period&_period>=this._MinPeriod?_period:this._MinPeriod;this._UsedChannels.includes(_num_channel)||this._UsedChannels.push(_num_channel),this._Interval||(this._Interval=setInterval(()=>{this._Sensor.get(d=>{this._UsedChannels.includes(0)&&(this._Channels[0].Value=d.temp),this._UsedChannels.includes(1)&&(this._Channels[1].Value=d.hum)})},period)),this._currentPeriod=period}ChangeFreq(_num_channel,freq){clearInterval(this._Interval),setTimeout(()=>this.Start(freq),this._Minfrequency)}Stop(_num_channel){this._Channels[_num_channel].Status=0,_num_channel?this._UsedChannels.splice(this._UsedChannels.indexOf(_num_channel)):(this._UsedChannels=[],clearInterval(this._Interval),this._Interval=null)}}exports=ClassSHT31;